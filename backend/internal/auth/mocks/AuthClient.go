// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import http "net/http"
import mock "github.com/stretchr/testify/mock"
import models "github.com/r-cbb/cbbpoll/internal/models"

// AuthClient is an autogenerated mock type for the AuthClient type
type AuthClient struct {
	mock.Mock
}

// Authenticator provides a mock function with given fields: _a0
func (_m *AuthClient) Authenticator(_a0 http.HandlerFunc) http.HandlerFunc {
	ret := _m.Called(_a0)

	var r0 http.HandlerFunc
	if rf, ok := ret.Get(0).(func(http.HandlerFunc) http.HandlerFunc); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.HandlerFunc)
		}
	}

	return r0
}

// CreateJWT provides a mock function with given fields: u
func (_m *AuthClient) CreateJWT(u models.User) (string, error) {
	ret := _m.Called(u)

	var r0 string
	if rf, ok := ret.Get(0).(func(models.User) string); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserTokenFromCtx provides a mock function with given fields: ctx
func (_m *AuthClient) UserTokenFromCtx(ctx context.Context) models.UserToken {
	ret := _m.Called(ctx)

	var r0 models.UserToken
	if rf, ok := ret.Get(0).(func(context.Context) models.UserToken); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(models.UserToken)
	}

	return r0
}

// Verifier provides a mock function with given fields:
func (_m *AuthClient) Verifier() func(http.Handler) http.Handler {
	ret := _m.Called()

	var r0 func(http.Handler) http.Handler
	if rf, ok := ret.Get(0).(func() func(http.Handler) http.Handler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(http.Handler) http.Handler)
		}
	}

	return r0
}
