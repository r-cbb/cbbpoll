// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/r-cbb/cbbpoll/internal/models"

// DBClient is an autogenerated mock type for the DBClient type
type DBClient struct {
	mock.Mock
}

// AddBallot provides a mock function with given fields: newBallot
func (_m *DBClient) AddBallot(newBallot models.Ballot) (models.Ballot, error) {
	ret := _m.Called(newBallot)

	var r0 models.Ballot
	if rf, ok := ret.Get(0).(func(models.Ballot) models.Ballot); ok {
		r0 = rf(newBallot)
	} else {
		r0 = ret.Get(0).(models.Ballot)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Ballot) error); ok {
		r1 = rf(newBallot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPoll provides a mock function with given fields: newPoll
func (_m *DBClient) AddPoll(newPoll models.Poll) (models.Poll, error) {
	ret := _m.Called(newPoll)

	var r0 models.Poll
	if rf, ok := ret.Get(0).(func(models.Poll) models.Poll); ok {
		r0 = rf(newPoll)
	} else {
		r0 = ret.Get(0).(models.Poll)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Poll) error); ok {
		r1 = rf(newPoll)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTeam provides a mock function with given fields: newTeam
func (_m *DBClient) AddTeam(newTeam models.Team) (models.Team, error) {
	ret := _m.Called(newTeam)

	var r0 models.Team
	if rf, ok := ret.Get(0).(func(models.Team) models.Team); ok {
		r0 = rf(newTeam)
	} else {
		r0 = ret.Get(0).(models.Team)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Team) error); ok {
		r1 = rf(newTeam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddUser provides a mock function with given fields: newUser
func (_m *DBClient) AddUser(newUser models.User) (models.User, error) {
	ret := _m.Called(newUser)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(models.User) models.User); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBallot provides a mock function with given fields: id
func (_m *DBClient) DeleteBallot(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBallot provides a mock function with given fields: id
func (_m *DBClient) GetBallot(id int64) (models.Ballot, error) {
	ret := _m.Called(id)

	var r0 models.Ballot
	if rf, ok := ret.Get(0).(func(int64) models.Ballot); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Ballot)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPoll provides a mock function with given fields: id
func (_m *DBClient) GetPoll(id int64) (models.Poll, error) {
	ret := _m.Called(id)

	var r0 models.Poll
	if rf, ok := ret.Get(0).(func(int64) models.Poll); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Poll)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPollByWeek provides a mock function with given fields: season, week
func (_m *DBClient) GetPollByWeek(season int, week int) (models.Poll, error) {
	ret := _m.Called(season, week)

	var r0 models.Poll
	if rf, ok := ret.Get(0).(func(int, int) models.Poll); ok {
		r0 = rf(season, week)
	} else {
		r0 = ret.Get(0).(models.Poll)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(season, week)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeam provides a mock function with given fields: id
func (_m *DBClient) GetTeam(id int64) (models.Team, error) {
	ret := _m.Called(id)

	var r0 models.Team
	if rf, ok := ret.Get(0).(func(int64) models.Team); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Team)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeams provides a mock function with given fields:
func (_m *DBClient) GetTeams() ([]models.Team, error) {
	ret := _m.Called()

	var r0 []models.Team
	if rf, ok := ret.Get(0).(func() []models.Team); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: name
func (_m *DBClient) GetUser(name string) (models.User, error) {
	ret := _m.Called(name)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePoll provides a mock function with given fields: poll
func (_m *DBClient) UpdatePoll(poll models.Poll) error {
	ret := _m.Called(poll)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Poll) error); ok {
		r0 = rf(poll)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: user
func (_m *DBClient) UpdateUser(user models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
