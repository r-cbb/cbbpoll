{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Documentation for cbbpoll API.",
    "title": "cbbpoll.",
    "version": "0.1.0"
  },
  "host": "localhost:8000",
  "basePath": "/",
  "paths": {
    "/v1/ping": {
      "get": {
        "tags": [
          "meta"
        ],
        "summary": "Server health check and version information.",
        "operationId": "ping",
        "responses": {
          "200": {
            "$ref": "#/responses/pingResponse"
          }
        }
      }
    },
    "/v1/sessions": {
      "post": {
        "description": "Bearer token should be a reddit OAuth access token obtained by completing the reddit oauth flow for installed apps.\nSee https://github.com/reddit-archive/reddit/wiki/oauth2 for more information.",
        "tags": [
          "auth"
        ],
        "summary": "Request a new session from the server.",
        "operationId": "new-session",
        "parameters": [
          {
            "type": "string",
            "description": "reddit access token provided in the Authorization header using the Bearer scheme.",
            "name": "Authorization",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/sessionResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorizedError"
          },
          "500": {
            "$ref": "#/responses/unexpectedError"
          },
          "503": {
            "$ref": "#/responses/serviceUnavailableError"
          }
        }
      }
    },
    "/v1/teams": {
      "get": {
        "tags": [
          "teams"
        ],
        "summary": "Retrieve all Teams.",
        "operationId": "list-teams",
        "responses": {
          "200": {
            "$ref": "#/responses/teamsResponse"
          },
          "500": {
            "$ref": "#/responses/unexpectedError"
          }
        }
      },
      "post": {
        "tags": [
          "teams"
        ],
        "summary": "Create a new Team.",
        "operationId": "add-team",
        "parameters": [
          {
            "description": "Team to be added.  id field will be ignored, if present.",
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/teamCreated"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "500": {
            "$ref": "#/responses/unexpectedError"
          }
        }
      }
    },
    "/v1/teams/{teamId}": {
      "get": {
        "tags": [
          "teams"
        ],
        "summary": "Retrieve a Team by ID.",
        "operationId": "get-team",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "teamId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request.",
            "$ref": "#/responses/teamResponse"
          },
          "400": {
            "description": "Unable to parse teamId parameter."
          },
          "404": {
            "description": "Team not found."
          }
        }
      }
    },
    "/v1/users/me": {
      "get": {
        "security": [
          {
            "api_key": [
              "[]"
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "summary": "Return user information for authenticated user.",
        "operationId": "users-me",
        "responses": {
          "200": {
            "$ref": "#/responses/userResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorizedError"
          },
          "500": {
            "$ref": "#/responses/unexpectedError"
          }
        }
      }
    },
    "/v1/users/{userId}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Retrieve a User by name.",
        "operationId": "get-user",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful request.",
            "$ref": "#/responses/userResponse"
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    }
  },
  "definitions": {
    "Team": {
      "type": "object",
      "properties": {
        "conference": {
          "type": "string",
          "x-go-name": "Conference",
          "example": "Pac-12"
        },
        "full_name": {
          "type": "string",
          "x-go-name": "FullName",
          "example": "University of Arizona"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID",
          "example": 1
        },
        "nickname": {
          "type": "string",
          "x-go-name": "Nickname",
          "example": "Wildcats"
        },
        "short_name": {
          "type": "string",
          "x-go-name": "ShortName",
          "example": "Arizona"
        }
      },
      "x-go-package": "github.com/r-cbb/cbbpoll/internal/models"
    },
    "User": {
      "type": "object",
      "required": [
        "nickname"
      ],
      "properties": {
        "is_admin": {
          "type": "boolean",
          "x-go-name": "IsAdmin",
          "example": true
        },
        "nickname": {
          "type": "string",
          "x-go-name": "Nickname",
          "example": "Concision"
        }
      },
      "x-go-package": "github.com/r-cbb/cbbpoll/internal/models"
    },
    "VersionInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "x-go-name": "Version",
          "example": "v1.0.0"
        }
      },
      "x-go-package": "github.com/r-cbb/cbbpoll/internal/models"
    }
  },
  "responses": {
    "badRequestError": {
      "description": "Bad request."
    },
    "pingResponse": {
      "description": "Server version.",
      "schema": {
        "$ref": "#/definitions/VersionInfo"
      }
    },
    "serviceUnavailableError": {
      "description": "Service unavailable."
    },
    "sessionResponse": {
      "description": "Object containing the user's Nickname and a JWT for use in subsequent requests",
      "schema": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string",
            "x-go-name": "Nickname",
            "example": "Concision"
          },
          "token": {
            "type": "string",
            "x-go-name": "Token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          }
        }
      }
    },
    "teamCreated": {
      "description": "This response includes a JSON representation of the created Team in the response body and the URI for the team in the Location header",
      "schema": {
        "$ref": "#/definitions/Team"
      },
      "headers": {
        "Location": {
          "type": "string",
          "description": "in: header"
        }
      }
    },
    "teamResponse": {
      "description": "Team object.",
      "schema": {
        "$ref": "#/definitions/Team"
      }
    },
    "teamsResponse": {
      "description": "List of Teams.",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Team"
        }
      }
    },
    "unauthorizedError": {
      "description": "User unauthorized."
    },
    "unexpectedError": {
      "description": "Unexpected error."
    },
    "userResponse": {
      "description": "The requested User object",
      "schema": {
        "$ref": "#/definitions/User"
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}